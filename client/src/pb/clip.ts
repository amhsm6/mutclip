// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.0
// source: clip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "clip";

export interface Message {
  text?: Text | undefined;
  hdr?: FileHeader | undefined;
  chunk?: Chunk | undefined;
  nextChunk?: NextChunk | undefined;
  ack?: Ack | undefined;
  err?: Error | undefined;
}

export interface Text {
  data: string;
}

export interface FileHeader {
  filename: string;
  contentType: string;
  numChunks: number;
}

export interface Chunk {
  index: number;
  data: Uint8Array;
}

export interface NextChunk {
}

export interface Ack {
}

export interface Error {
  desc: string;
}

function createBaseMessage(): Message {
  return { text: undefined, hdr: undefined, chunk: undefined, nextChunk: undefined, ack: undefined, err: undefined };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      Text.encode(message.text, writer.uint32(10).fork()).join();
    }
    if (message.hdr !== undefined) {
      FileHeader.encode(message.hdr, writer.uint32(18).fork()).join();
    }
    if (message.chunk !== undefined) {
      Chunk.encode(message.chunk, writer.uint32(26).fork()).join();
    }
    if (message.nextChunk !== undefined) {
      NextChunk.encode(message.nextChunk, writer.uint32(34).fork()).join();
    }
    if (message.ack !== undefined) {
      Ack.encode(message.ack, writer.uint32(42).fork()).join();
    }
    if (message.err !== undefined) {
      Error.encode(message.err, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = Text.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hdr = FileHeader.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chunk = Chunk.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nextChunk = NextChunk.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ack = Ack.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.err = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      text: isSet(object.text) ? Text.fromJSON(object.text) : undefined,
      hdr: isSet(object.hdr) ? FileHeader.fromJSON(object.hdr) : undefined,
      chunk: isSet(object.chunk) ? Chunk.fromJSON(object.chunk) : undefined,
      nextChunk: isSet(object.nextChunk) ? NextChunk.fromJSON(object.nextChunk) : undefined,
      ack: isSet(object.ack) ? Ack.fromJSON(object.ack) : undefined,
      err: isSet(object.err) ? Error.fromJSON(object.err) : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = Text.toJSON(message.text);
    }
    if (message.hdr !== undefined) {
      obj.hdr = FileHeader.toJSON(message.hdr);
    }
    if (message.chunk !== undefined) {
      obj.chunk = Chunk.toJSON(message.chunk);
    }
    if (message.nextChunk !== undefined) {
      obj.nextChunk = NextChunk.toJSON(message.nextChunk);
    }
    if (message.ack !== undefined) {
      obj.ack = Ack.toJSON(message.ack);
    }
    if (message.err !== undefined) {
      obj.err = Error.toJSON(message.err);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.text = (object.text !== undefined && object.text !== null) ? Text.fromPartial(object.text) : undefined;
    message.hdr = (object.hdr !== undefined && object.hdr !== null) ? FileHeader.fromPartial(object.hdr) : undefined;
    message.chunk = (object.chunk !== undefined && object.chunk !== null) ? Chunk.fromPartial(object.chunk) : undefined;
    message.nextChunk = (object.nextChunk !== undefined && object.nextChunk !== null)
      ? NextChunk.fromPartial(object.nextChunk)
      : undefined;
    message.ack = (object.ack !== undefined && object.ack !== null) ? Ack.fromPartial(object.ack) : undefined;
    message.err = (object.err !== undefined && object.err !== null) ? Error.fromPartial(object.err) : undefined;
    return message;
  },
};

function createBaseText(): Text {
  return { data: "" };
}

export const Text: MessageFns<Text> = {
  encode(message: Text, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Text {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Text {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: Text): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Text>, I>>(base?: I): Text {
    return Text.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Text>, I>>(object: I): Text {
    const message = createBaseText();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseFileHeader(): FileHeader {
  return { filename: "", contentType: "", numChunks: 0 };
}

export const FileHeader: MessageFns<FileHeader> = {
  encode(message: FileHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filename !== "") {
      writer.uint32(10).string(message.filename);
    }
    if (message.contentType !== "") {
      writer.uint32(18).string(message.contentType);
    }
    if (message.numChunks !== 0) {
      writer.uint32(24).int32(message.numChunks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numChunks = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileHeader {
    return {
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      numChunks: isSet(object.numChunks) ? globalThis.Number(object.numChunks) : 0,
    };
  },

  toJSON(message: FileHeader): unknown {
    const obj: any = {};
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.numChunks !== 0) {
      obj.numChunks = Math.round(message.numChunks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileHeader>, I>>(base?: I): FileHeader {
    return FileHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileHeader>, I>>(object: I): FileHeader {
    const message = createBaseFileHeader();
    message.filename = object.filename ?? "";
    message.contentType = object.contentType ?? "";
    message.numChunks = object.numChunks ?? 0;
    return message;
  },
};

function createBaseChunk(): Chunk {
  return { index: 0, data: new Uint8Array(0) };
}

export const Chunk: MessageFns<Chunk> = {
  encode(message: Chunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Chunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chunk {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: Chunk): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Chunk>, I>>(base?: I): Chunk {
    return Chunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Chunk>, I>>(object: I): Chunk {
    const message = createBaseChunk();
    message.index = object.index ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseNextChunk(): NextChunk {
  return {};
}

export const NextChunk: MessageFns<NextChunk> = {
  encode(_: NextChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NextChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNextChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NextChunk {
    return {};
  },

  toJSON(_: NextChunk): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NextChunk>, I>>(base?: I): NextChunk {
    return NextChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NextChunk>, I>>(_: I): NextChunk {
    const message = createBaseNextChunk();
    return message;
  },
};

function createBaseAck(): Ack {
  return {};
}

export const Ack: MessageFns<Ack> = {
  encode(_: Ack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Ack {
    return {};
  },

  toJSON(_: Ack): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Ack>, I>>(base?: I): Ack {
    return Ack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ack>, I>>(_: I): Ack {
    const message = createBaseAck();
    return message;
  },
};

function createBaseError(): Error {
  return { desc: "" };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.desc !== "") {
      writer.uint32(10).string(message.desc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.desc = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return { desc: isSet(object.desc) ? globalThis.String(object.desc) : "" };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.desc !== "") {
      obj.desc = message.desc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.desc = object.desc ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
