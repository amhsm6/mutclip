// @generated
// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    #[prost(oneof="message::Msg", tags="1, 2, 3, 4, 5, 6")]
    pub msg: ::core::option::Option<message::Msg>,
}
/// Nested message and enum types in `Message`.
pub mod message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Msg {
        #[prost(message, tag="1")]
        Text(super::Text),
        #[prost(message, tag="2")]
        Hdr(super::FileHeader),
        #[prost(message, tag="3")]
        Chunk(super::Chunk),
        #[prost(message, tag="4")]
        NextChunk(super::NextChunk),
        #[prost(message, tag="5")]
        Ack(super::Ack),
        #[prost(message, tag="6")]
        Err(super::Error),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Text {
    #[prost(string, tag="1")]
    pub data: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileHeader {
    #[prost(string, tag="1")]
    pub filename: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(int32, tag="3")]
    pub num_chunks: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chunk {
    #[prost(int32, tag="1")]
    pub index: i32,
    #[prost(bytes="vec", tag="2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NextChunk {
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ack {
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    #[prost(string, tag="1")]
    pub desc: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
